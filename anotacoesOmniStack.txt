Site para fazer o desing de uma aplicação: https://www.figma.com/

*DIA 1 - Conhecendo a OmniStack

-->NODE.JS
Criando uma aplicação com Node.js
1) Executar o Windows PowerShell como administrador
2) Entrar na pasta que o projeto vai ficar (usa o comando "cd" para isso). No curso foi criado uma pasta chamada "backend" para fazer esses processos
3) Executar o comando "npm init -y". Esse comando vai criar um arquivo package.json
4) Abir a pasta no VSCode

Instalando um modulo chamado express para auxiliar nas funcionalidades do projeto
5) Executar o comando "npm install express" na mesma pasta. Esse comando vai criar um novo arquivo e uma nova pasta (que armazena o código fonte das dependências que foram instaladas no projeto)

6) Criar um arquivo index.js para escrever todo o código da aplicação

7) Depois de ter escrito alguns códigos no index.js, para executá-lo basta escrever no Windows PowerShell: index.js
8) O comando não vai parar de executar, então basta abrir o navegador e digitar localhost:3333 para ver a aplicação
9) Se quiser parar de executar, basta pressionar ctrl+c no PowerShell


-->REACTJS e SPA
Criando um projeto com ReactJS
10) Sair da pasta da aplicação Node.js (que estava na pasta backend). Voltar uma pasta com o comando "cd .."
11) Executar o comando "npx create-react-app frontend" (frontend é o nome do projeto)
12) Entrar na pasta frontend (comando "cd frontend")
13) Abrir essa pasta no VSCode
14) Executar o comando "npm start" na pasta frontend (obs: vai abrir uma aba no navegador)




*DIA 2 - Criando a base da aplicação
15) Abrir a pasta backend no VSCode
16) Executar o servidor com o comando "node index.js" na pasta backend

Obs: o software insomnia é útil para verificar as requisições, com ele será possível testa-las

INSTALANDO O PACOTE NODEMON (com ele não precisa ficar reiniciando o node toda vez que alterar o código)
17) Executar o comando "npm install nodemon -D"
18) Mudar no arquivo package.json o o campo:
"scripts": {
    "start": "nodemon index.js"
  },
19) Executar o comando "npm start", ou seja, toda vez que quisermos executar o backend, basta rodar o comando npm start


/**
 * BANCO DE DADOS:
 * Será utilizado o bando de dados SQLite
 * 
 * Para fazer a comunicaão com o bando, existem três formas principais:
 * 1) Instalar o Driver direto do bando de dados (pacote oficial de bando de dados para node)
 *      Para buscar os usuários será usado o comando: SELECT * FROM users
 * 2) Usando uma outra estratégia chamada Query Builder, vamos escrever nossas querys utilizando javascript
 *      Para buscar os usuários será usado o comando: table('user').select('*')...
 *      Essa abordagem permite aceitar qualquer banco SQL, dessa forma pode mudar o banco sem mudar as querys
 *      Vamos utilizar o Query Builder chamado KNEXT.js
 */


INSTALANDO O QUERY BUILDER KNEXT.js
20) Executar o comando "npm install knex" na pasta backend

INSTALANDO O DRIVER DE ACORDO COM O BANCO DE DADOS QUE SERÁ UTILIZADO (vamos utilizar o SQLite)
21) Executar o comando "npm install sqlite3" na pasta backend

FAZENDO A CONEXÃO COM O BANCO DE DADOS + ORGANIZANDO OS ARQUIVOS
22) Executar o comando "npx knex init" na pasta backend (ele vai criar um arquivo onde vai ficar as configurações de acesso ao banco de dados)
Organizando os arquivos...
23) Criar uma pasta chamada src (irá armazenar todos os códigos desenvolvidos), mover o arquivo index.js para essa pasta e lembrar de alterar no arquivo package.json:
"scripts": {
    "start": "nodemon src/index.js"
  },
24) Criar um arquivo chamado "routes.js" que vai armazenar todas as rotas do programa (que antes estava no index.js)
Voltando ao banco de dados...
25) Criar uma nova pasta chamada database na pasta src
26) No arquivo knexfile.js, mudar o campo:
development: {
    client: 'sqlite3',
    connection: {
      filename: './src/database/db.sqlite'
    }
  },

CRIANDO A PRIMEIRA MIGRATION
27) Criar uma pasta chamada "migrations" dentro da pasta database
28) Acrescentar no arquivo knexfile.js:
development: {
    client: 'sqlite3',
    connection: {
      filename: './src/database/db.sqlite'
    },
    migrations: {
      directory: './src/database/migrations'
    }
  },
29) Para criar um arquivo de migration (responsável por criar tabela no banco), executar o comando "npx knex migrate:make create_ongs" na pasta backend (create_ongs é o nome da migration). Será criado um arquivo na pasta migration
30) Acrescentar no arquivo knexfile.js:
development: {
    client: 'sqlite3',
    connection: {
      filename: './src/database/db.sqlite'
    },
    migrations: {
      directory: './src/database/migrations'
    },
    useNullAsDefault: true,
  },
31) Depois de acrescentar instruções nas funções dos métodos do arquivo criado na pasta migrations, executar o comando "npx knex migrate:latest" para ser executado a migration. Isso vai criar a tabela do banco de dados


Depois de ter criado duas tabelas para o banco e ter modificado os dois métodos daquele arquivo que foi criado, foi criado um arquivo connections.js na pasta database
A pasta controllers armazena os controladores para cada funcionalidade (o padrão MVC está sendo utilizado)
*aqui fizemos todas as funcionalidades do backend*

INSTALANDO O MÓDULO CORS PARA SEGURANÇA (vai determinar quem pode acessar a aplicação)
32) Executar o comando "npm install cors". Ele deve ser importado no index para ser utilizado




*DIA 3 - Construindo a interface web
Primeiro excluimos os arquivos do frontend:
setupTest, serviceWorker, logo, index.css, App.text e App.css da pasta src (ficou só: App.js e index.js)
README da pasta frontend
logo512, logo192, robots e manifest da pasta public (ficou só index.html e favicon)
E tiramos as importações à esses arquivos
No index.html foi excluido tudo que estava entre <meta name="theme-color...> até <tilte> (eles ficaram) 

33) Abrir a pasta frontend no Windows PowerShell
34) Executar o comando "npm start"

Entendendo o funcionamento do React:
O react monta a estrutura da página a partir do javascript, que só é executado depois que o HTML está montado na tela.
Então o que o react faz: joga o html em tela (aquele arquivo index.html da pasta public), depois o javascript entra em ação
e preenche a <div id="root"></div> com o restante o seu código que está no a
O arquivo index.js (da pasta src) é o primeiro arquivo que o html vai ler (mesmo que ele não esja sido importado, isso é feito de maneira automática pelo react).
	Nesse arquivo index.js, é feito uma renderização (colocando em tela) do App na div com id root
O arquivo App.js possui componente (função que retorna html, quando esse html está integrado dentro dentro do javascript o html é chamado de JSX)

No react, propriedade é como se fosse atributo.
Estado: toda vez que um componente precisar armazenar uma informação dentro dele, 
   não será criado uma variável, será criado um estado pois com ele conseguimos 
   alterar o valor dessa infromação de modo a refletir na interface


Instalando pacote de icones
Executar o comando na pasta frontend: "npm install react-icons"

Instalando a parte de rotas na aplicação
Executar o comando: "npm install react-router-dom" na pasta frontend
Criei o arquivo routes.js na pasta src que importa esse pacote

Conectando o backend com o frontend:
1) Abrir a pasta backend no windows power shell
2) Executar o comando "npm start" (para rodar o servidor)
3) Executar o comando "npm install axios"




*DIA 4 - Desenvolvendo o app mobile
Instalando o Expo (para auxiliar no desenvolvimento)
1) Abrir o windows power shell e ir para a pasta do projeto (OmniStack11.0), executar o comando: npm install -g expo-cli
2) Digitar o comando "expo -h"
3) Digitar o comando "expo init mobile" para criar um projeto (mobile é um nome qualquer para o projeto)
4) Escolher o template "blank"
5) Entrar na pasta mobile no Windows Power Shell e no VS code

Executando o projeto no celular
6) Executar na pasta mobile o comando "yarn start" ou "npm start" (vai abrir uma janela).
Deve baixar no celular um app chamado Expo, e ler o qr code (pela camera) que apareceu na janela

7) No arquivo app.json, mudar name e slug para o nome da aplicacao

...
A pasta src que criamos tem a pasta pages, que por sua vez tem uma pasta e arquivos para cada página da aplicação, e o arquivo routes para as rotas

8) Executar o comando "npm install @react-navigation/native" na pasta mobile
9) Depois executar o comando "expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view"
Agora continuamos nas configurações das rotas

10) Como vamos usar o Stack navigator para a aplicação, executar o comando: "npm install @react-navigation/stack"

11) Executar o comando "expo install expo-constants"


Envio de email:
12) Instalar o pacote pelo comando: "expo install expo-mail-composer" na pasta mobile


Conectando com a api
13) Dar npm start na pasta backend
14) Instalar o axios pelo comando: "npm install axios" na pasta mobile

Pacote para usar moeda... Coisas internacionais
15) Executar o comando: "npm install intl" na pasta mobile



*DIA 5 - Funcionalidades avançadas
Validação de componentes (o celebrate conecta o express com o joi que é para validacao)
1) Executar o comando "npm install celebrate" na pasta backend
Importamos o celebrate no index.js (da pasta src), e no arquivo de rotas (routes.js) colocamos as validações em cada método de rotas com a função celebrate.

Testes
Configurando o framework Jest que será utilizado para teste
1) Executar o comando "npm install jest -D" na pasta backend
2) Executar o comando "npx jest --init" na pasta backend, para executar o jest
   Escolher: yes, node, no, yes
   Vai ser criado um arquivo chamado jest.config.js
   Criamos uma pasta tests onde vamos colocar todos os tipos de testes
       Testes de integração testam o fluxo de uma rota/funcionalidade inteira da aplicação
       Tester unicos testa um pedaço da aplicação de uma forma isolada
3) Executar o comando "npm test" para executar os testes

4) Configurando o banco de dados para teste, no arquivo knexfile.js, colocar:
test: {
    client: 'sqlite3',
    connection: {
      filename: './src/database/test.sqlite'
    },
    migrations: {
      directory: './src/database/migrations'
    },
    useNullAsDefault: true,
  },

5) Executar o comando "npm install cross-env" na pasta backend
6) Mudar o campo "test" do package.json para:
"test": "cross-env NODE_ENV=test jest"
7) No arquivo "connection.js" da pasta database:
const config = process.env.NODE_ENV == 'test' ? configuration.test : configuration.development;
const connection = knex(config);
8) E criamos arquivos na pasta tests/integration para fazer os testes

Instalando a biblioteca para fazer validações com a api
9) Executar o comando "npm install supertest -D" na pasta backend

Na pasta src, criamos o arquivo server.js e RENOMEAMOS o arquivo index.js para app.js
Mudar o campo start de scripts do package.json:
    "start": "nodemon src/server.js",






- Node.js: Uma plataforma escrita em cima do motor V8 do Google Chrome
- Responsabilidade de um back-end:
  Regras de negócio
  Conexão com Banco de Dados
  Comunicação com WebServices
- Estrutura de dados utilizada para conectar o back-end com outros clientes: JSON
- Abordagem do React: Uma abordagem SPA, onde as requisições trazem apenas dados como resposta e, com esses dados, o front-end pode preencher as informações em tela
- Abordagem do React Native: Todo código é feito em JavaScript e os próprios dispositivos passam a entender esse código JavaScript para gerar uma interface Nativa
- Expo: Expo é uma ferramenta que nos permite desenvolver para React Native sem instalar recursos nativos do Android e iOS
- Migrations no back-end:
  Para controle de versão do banco de dados
  Para facilitar o trabalho de mais devs no projeto, mantendo a base de dados sempre atualizada
- Métodos HTTP:
  GET: Buscar ou listar uma informação
  POST: Criar uma informação
  PUT: Alterar uma informação
  DELETE: Deletar uma informação
- Tipos de parâmetros:
  Query params: Parâmetros nomeados enviados na rota após o "?" usados em filtros e paginações, por exemplo
  Route params: Parâmetros utilizados para identificar recursos
  Request body: Corpo da requisição utilizado para criar ou alterar recursos
- Entidades no back-end: A representação de uma tabela do banco de dados, algo que será mantido pela aplicação
- Propriedades no React.js: São atributos repassados de um componente pai para o filho
- Conceito de Imutabilidade no React.js: Segundo este conceito, não podemos manipular o valor de um estado de uma forma direta. Podemos apenas sobrepor o valor da variável do estado
- Conceito de Estado no ReactJS: Trata-se de uma informação a ser mantida pelo componente. Toda vez que o estado é alterado, o componente faz a renderização novamente exibindo as novas informações em tela.
- Expo: Com o Expo, nós instalamos um aplicativo no celular chamado Expo, e dentro dele, tudo o que precisamos para desenvolver no React Native já está instalado.
- Diferenças entre ReactJS e React Native:
  No ReactJS, os elementos em tela possuem um significado semântico. Já no React Native, não há semântica nos elementos
  No React Native sempre precisamos passar uma tag style que recebe um objeto com a estilização. Já no ReactJS, podemos podemos definir classes estilizadas
- TDD: Test-Driven Development - Segundo esta técnica fazemos os testes antes mesmo de terminar o desenvolvimento das funcionalidades.
- Testes:
  Teste unitário testa um pedaço muito isolado de código
  Devemos configurar um banco de dados apenas para testes na aplicação


